{"version":3,"sources":["utils/dataFilters.js","components/Citymonitor/Citymonitor.js","App.js","index.js"],"names":["getCategoryAndColorCode","v","Promise","resolve","bgColor","category","Citymonitor","aqiData","liveData","historyData","options","animation","interaction","intersect","plugins","legend","generateAQICell","Array","isArray","length","map","ad","Col","sm","className","Card","style","backgroundColor","color","Body","Row","Title","city","Subtitle","lups","Text","parseFloat","aqi","toFixed","data","labels","datasets","label","fill","lineTension","borderColor","height","Footer","App","localStoreKey","useState","setAqiData","useEffect","aqiLocalData","JSON","parse","localStorage","getItem","removeItem","err","window","onbeforeunload","setItem","stringify","Container","fluid","url","onMessage","wData","prev","prevData","nd","od","aqiHistory","odi","lastUpdatedOn","moment","format","i","splice","fd","cities","sort","filter","fdv","async","mapLimit","a","d","fromNow","push","shift","result","SocketAQIData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32ab300a.chunk.js","sourcesContent":["import moment from 'moment'\nimport async from 'async'\n\nconst getCategoryAndColorCode = (v) => {\n    return new Promise(resolve => {\n        if (v >= 0 && v <= 50) {\n            return resolve({ bgColor: \"#55a84f\", category: \"Good\" })\n        }\n        if (v >= 51 && v <= 100) {\n            return resolve({ bgColor: \"#a3c853\", category: \"Satisfactory\" })\n        }\n        if (v >= 101 && v <= 200) {\n            return resolve({ bgColor: \"#fff833\", category: \"Moderate\" })\n        }\n        if (v >= 201 && v <= 300) {\n            return resolve({ bgColor: \"#f29c33\", category: \"Poor\" })\n        }\n        if (v >= 301 && v <= 400) {\n            return resolve({ bgColor: \"#e93f33\", category: \"Very Poor\" })\n        }\n        if (v >= 401 && v <= 500) {\n            return resolve({ bgColor: \"#af2d24\", category: \"Severe\" })\n        }\n    });\n}\n\nexport const SocketAQIData = (prevData, nd = []) => {\n    let od = !!prevData && prevData.liveData ? prevData.liveData : []\n    nd = nd || []\n    let aqiHistory = !!prevData && prevData.historyData ? prevData.historyData : {};\n\n    for (let odi of od) {\n        if (!odi.lastUpdatedOn) {\n            odi.lastUpdatedOn = moment().format()\n        }\n        for (let i = 0; i <= nd.length; i++) {\n            if (!!nd[i]) {\n                if (nd[i].city === odi.city) {\n                    odi.aqi = nd[i].aqi\n                    odi.lastUpdatedOn = moment().format()\n                    nd.splice(i, 1)\n                } else {\n                    nd[i].lastUpdatedOn = moment().format()\n                }\n            }\n        }\n    }\n    let fd = [...od, ...nd]\n    let cities = fd.map(v => v.city)\n    cities.sort()\n    cities = cities.map((v, i) => {\n        v = (fd.filter(fdv => fdv.city === v))[0]\n        return v;\n    })\n    async.mapLimit(cities, 12, async function (v) {\n        const aqi = parseFloat(parseFloat(v.aqi).toFixed(2))\n        const d = await getCategoryAndColorCode(aqi);\n        v.bgColor = d.bgColor\n        v.category = d.category\n        v.lups = moment(v.lastUpdatedOn).fromNow()\n\n        if (!aqiHistory[v.city]) {\n            aqiHistory[v.city] = []\n        }\n        aqiHistory[v.city].push(aqi)\n        if (aqiHistory[v.city].length > 10) {\n            aqiHistory[v.city].shift()\n        }\n        return v;\n    }, (err, result) => {\n        if (!err) {\n            cities = result;\n        }\n    })\n    return { liveData: cities, historyData: aqiHistory }\n}","import { Card, Row, Col } from 'react-bootstrap'\nimport { Line } from 'react-chartjs-2'\n\nimport './Citymonitor.scss'\n\nfunction Citymonitor({ aqiData }) {\n    const liveData = !!aqiData && aqiData.liveData ? aqiData.liveData : []\n    const historyData = !!aqiData && aqiData.historyData ? aqiData.historyData : {}\n    const getHistoryData = (city) => {\n        const ahd = {\n            labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n            datasets: [\n                {\n                    label: '',\n                    data: historyData[city] || [],\n                    fill: false,\n                    lineTension: 0,\n                    backgroundColor: '#ccc',\n                    borderColor: '#000',\n                }\n            ]\n        }\n        return ahd;\n    }\n    const options = {\n        animation: false,\n        interaction: {\n            intersect: false\n        },\n        plugins: {\n            legend: false\n        }\n    };\n\n    const generateAQICell = !!liveData && Array.isArray(liveData) && liveData.length ? liveData.map(ad => (\n        <Col sm=\"4\" key={ad.city} className=\"CardContainer\">\n            <Card style={{ backgroundColor: ad?.bgColor, color: \"inherit\" }}>\n                <Card.Body>\n                    <Row>\n                        <Col sm=\"5\">\n                            <Card.Title>{ad.city}</Card.Title>\n                            <Card.Subtitle><small>{ad?.lups}</small></Card.Subtitle>\n                            <Card.Text><strong>{parseFloat(ad.aqi).toFixed(2)}</strong></Card.Text>\n                        </Col>\n                        <Col sm=\"7\">\n                            <Line data={() => getHistoryData(ad.city)} options={options} height=\"200px\" />\n                        </Col>\n                    </Row>\n                </Card.Body>\n                <Card.Footer>{ad?.category || \"Loading...\"}</Card.Footer>\n            </Card>\n        </Col>\n    )) : (<Col><p className=\"text-center\">Please wait...</p></Col>)\n\n    return <Row className=\"Citymonitor\">{generateAQICell}</Row>\n}\nexport default Citymonitor\n","import { useState, useEffect } from 'react'\nimport Websocket from 'react-websocket';\nimport { Container } from 'react-bootstrap'\n\nimport { SocketAQIData } from './utils/dataFilters'\n\nimport Citymonitor from './components/Citymonitor/Citymonitor'\nimport './App.scss'\n\n\nfunction App() {\n  const socketUrl = \"wss://city-ws.herokuapp.com\"\n  const localStoreKey = \"aqiData\"\n\n  const [aqiData, setAqiData] = useState({ liveData: [], historyData: {} })\n\n  useEffect(() => {\n    try {\n      const aqiLocalData = JSON.parse(localStorage.getItem(localStoreKey))\n      setAqiData(aqiLocalData)\n      localStorage.removeItem(localStoreKey)\n    } catch (err) { }\n  }, [])\n\n  window.onbeforeunload = () => {\n    if (!!aqiData) {\n      localStorage.setItem(localStoreKey, JSON.stringify(aqiData))\n    }\n  }\n\n  const handelUpdatedMessage = (data) => {\n    try {\n      const wData = JSON.parse(data)\n      setAqiData(prev => SocketAQIData(prev, wData))\n    } catch (err) { }\n  }\n  return (\n    <div>\n      <h1 className=\"text-center AQI-title\">Air Quality Monitor</h1>\n      <Container fluid>\n        <Citymonitor aqiData={aqiData} />\n      </Container>\n      <Websocket url={socketUrl} onMessage={handelUpdatedMessage} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}